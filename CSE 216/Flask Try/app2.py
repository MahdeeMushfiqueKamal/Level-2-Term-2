import os
import sys
import cx_Oracle
from flask import Flask,render_template, url_for

if sys.platform.startswith("darwin"):
    cx_Oracle.init_oracle_client(lib_dir=os.environ.get("HOME")+"/instantclient_19_3")
elif sys.platform.startswith("win32"):
    cx_Oracle.init_oracle_client(lib_dir=r"C:\instantclient_21_3")

def init_session(connection, requestedTag_ignored):
    cursor = connection.cursor()
    cursor.execute("""
        ALTER SESSION SET
          TIME_ZONE = 'UTC'
          NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI'""")

# start_pool(): starts the connection pool
def start_pool():
    pool_min = 4
    pool_max = 4
    pool_inc = 0
    pool_gmd = cx_Oracle.SPOOL_ATTRVAL_WAIT

    print("Connecting to localhost")

    pool = cx_Oracle.SessionPool(user="SYSTEM",
                                 password="1234",
                                 dsn="127.0.0.1/orcl",
                                 min=pool_min,
                                 max=pool_max,
                                 increment=pool_inc,
                                 threaded=True,
                                 getmode=pool_gmd,
                                 sessionCallback=init_session)

    return pool

################################################################################
#
# create_schema(): drop and create the demo table, and add a row
#
def create_schema():
    connection = pool.acquire()
    cursor = connection.cursor()
    cursor.execute("""
        begin
            begin
            execute immediate 'drop table UNIVERSITY';
            exception when others then
              if sqlcode <> -942 then
                raise;
              end if;
            end;
            execute immediate 'CREATE TABLE UNIVERSITY(UNI_ID VARCHAR2(4) PRIMARY KEY,NAME VARCHAR2(60),LOCATION VARCHAR(255))';
            execute immediate 'INSERT INTO UNIVERSITY(UNI_ID,NAME,LOCATION) VALUES(''BUET'',''Bangladesh University of Engineering and Technology'', ''Dhaka-1000'')';
            execute immediate 'INSERT INTO UNIVERSITY(UNI_ID,NAME,LOCATION) VALUES(''KUET'',''Khulna University of Engineering and Technology'', ''Fulbarigate,Khulna'')';
            execute immediate 'INSERT INTO UNIVERSITY(UNI_ID,NAME,LOCATION) VALUES(''RUET'',''Rajshahi University of Engineering and Technology'', ''Kazla, Rajshahi-6204'')';

          commit;
        end;""")


################################################################################
#
# Specify some routes
#
# The default route will display a welcome message:
#   http://127.0.0.1:8080/
#
# To insert a new user 'fred' you can call:
#    http://127.0.0.1:8080/post/fred
#
# To find a username you can pass an id, for example 1:
#   http://127.0.0.1:8080/user/1
#

app = Flask(__name__)

# Display a welcome message on the 'home' page
@app.route('/')
def index():
    connection = pool.acquire()
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM UNIVERSITY")
    r = cursor.fetchall()
    return render_template('index.html',r=r)


# Add a new username
#
# The new user's id is generated by the DB and returned in the OUT bind
# variable 'idbv'.  As before, we leave closing the cursor and connection to
# the end-of-scope cleanup.
@app.route('/post/<string:username>')
def post(username):
    connection = pool.acquire()
    cursor = connection.cursor()
    connection.autocommit = True
    idbv = cursor.var(int)
    cursor.execute("""
        insert into demo (username)
        values (:unbv)
        returning id into :idbv""", [username, idbv])
    return 'Inserted {} with id {}'.format(username, idbv.getvalue()[0])

# Show the username for a given id
@app.route('/user/<int:id>')
def show_username(id):
    connection = pool.acquire()
    cursor = connection.cursor()
    cursor.execute("select username from demo where id = :idbv", [id])
    r = cursor.fetchone()
    return (r[0] if r else "Unknown user id")

################################################################################
#
# Initialization is done once at startup time
#
if __name__ == '__main__':

    # Start a pool of connections
    pool = start_pool()

    # Create a demo table
    create_schema()

    # Start a webserver
    # app.run(port=int(os.environ.get('PORT', '8080')))
    app.run(port=int(1520))